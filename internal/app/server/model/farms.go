// Code generated by SQLbsoner 4.5.0 (https://github.com/volatiletech/sqlbsoner). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"github.com/qiniu/qmgo"
	"github.com/qiniu/qmgo/options"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Farms is an object representing the database table.
type Farms struct {
	Id              primitive.ObjectID `bson:"_id"`
	Name            string             `bson:"name"`
	PoolId          string             `bson:"pool_id"`
	Creator         string             `bson:"creator"`
	Description     string             `bson:"description"`
	StartHeight     string             `bson:"start_height"`
	EndHeight       string             `bson:"end_height"`
	Editable        bool               `bson:"editable"`
	Expired         bool               `bson:"expired"`
	TotalLptLocked  Coin               `bson:"total_lpt_locked"`
	TotalReward     []Coin             `bson:"total_reward"`
	RemainingReward []Coin             `bson:"remaining_reward"`
	RewardPerBlock  []Coin             `bson:"reward_per_block"`
	OrderBy         int                `bson:"order_by"`
	Visible         bool               `bson:"visible"`
	//IsLocalFarm     bool               `bson:"is_local_farm"`
	CreateAt int64 `bson:"create_at"`
	UpdateAt int64 `bson:"update_at"`
}

type Coin struct {
	Denom  string `bson:"denom"`
	Amount string `bson:"amount"`
}

const CollectionNameFarms = "farms"

func (d Farms) TableName() string {
	return CollectionNameFarms
}

func (d Farms) EnsureIndexes() {
	var indexes []options.IndexModel
	indexes = append(indexes, options.IndexModel{
		Key:        []string{"-pool_id"},
		Unique:     true,
		Background: true,
	}, options.IndexModel{
		Key:        []string{"-visible"},
		Background: true,
	})
	ensureIndexes(d.TableName(), indexes)
}

func (d Farms) PkKvPair() map[string]interface{} {
	return bson.M{"pool_id": d.PoolId}
}

func (d Farms) findAll(query, selector bson.M) ([]Farms, error) {
	var farms []Farms
	fn := func(c *qmgo.Collection) error {
		return c.Find(_ctx, query).Select(selector).Sort("-order_by").All(&farms)
	}

	err := ExecCollection(d.TableName(), fn)

	return farms, err
}

func (f Farms) FindAll() ([]Farms, error) {

	return f.findAll(bson.M{}, bson.M{})
}
func (f Farms) FindLPTokenByPageSize(skip, limit int64) ([]Farms, error) {
	var farms []Farms
	fn := func(c *qmgo.Collection) error {
		return c.Find(_ctx, bson.M{}).Select(bson.M{"total_lpt_locked": 1, "pool_id": 1}).Skip(skip).Limit(limit).All(&farms)
	}

	err := ExecCollection(f.TableName(), fn)

	return farms, err
}

func (f Farms) FindAllVisibleFarm() ([]Farms, error) {

	return f.findAll(bson.M{"visible": true}, bson.M{})
}

func (d Farms) Upsert() error {

	filter := bson.M{
		"pool_id": d.PoolId,
	}

	_, err := NewCollection(d).Upsert(_ctx, filter, d)
	if err != nil {
		return err
	}

	return nil
}

func (f Farms) replaceOne(filter bson.M) error {
	return NewCollection(f).ReplaceOne(_ctx, filter, f)
}

func (f Farms) ReplaceOneByPoolID() error {

	return f.replaceOne(bson.M{"pool_id": f.PoolId})
}

func (f Farms) InsertMany(farms []Farms) error {

	_, err := NewCollection(f).InsertMany(_ctx, farms)
	if err != nil {
		return err
	}
	return nil
}
